|**
----------------------------
BOT_SHM.mac
----------------------------
This macro is configured for use by the SHAMAN class
Modify the BOT_CLS_CHARNAME.ini file for use by a specific toon
This was written ground up for usage with xiris's bots.

Usage: /mac bot_shm ${_tank1Name} ${_tank2Name} ${_healPoint} ${_assistArgs}

______________________________________________
REVISION HISTORY
	09.27.16	xiris	INITIAL REVISION
	10.24.16	xiris 	Moved Buffing to external include
	11.14.16	xiris 	Added support for an exclude list (see xiris_common for include)
	11.11.17	xiris   Added support for removal of mq2melee
	09.17.18    xiris   Included ALL xiris bot libraries in common instead of in individual macros
	12.22.21	xiris	Cleaned up some of the healing to bring inline with clerics
	01.02.22	xiris	Modified a bit to work a little smoother 
	04.05.22 	xiris	Added new Events aggregator and handlers
	04.16.22	xiris	Overhauled group heal method and variable names
						Moved commons healing functions to the include
______________________________________________
REQUIRED PLUGINS
    mq2cast
    mq2eqbc
    mq2debuffs
    mq2moveutils
    
______________________________________________
REQUIRED INCLUDES  
	xiris_common/xiris_common.inc
**|

#include xiris_common/xiris_common.inc

#TURBO 120

#EVENT DOSHRINK 			"[#1#] doShrink#*#"
#EVENT DOSHRINK 			"<#1#> doShrink#*#"
#EVENT DOSHRINK				"#1# tells the group#*#'doShrink#*#'"
#EVENT DOSHRINK				"#1# tells you#*#'doShrink#*#'"
#EVENT DOSHRINK				"#1# tells the raid#*#'doShrink#*#'"
#EVENT DOSHRINK				"#1# tell your raid#*#'doShrink#*#'"
#EVENT DOSHRINK 			"[ #1# #*#]#*#doShrink#*#"

Sub InitEvents_Class
	/call RegisterClassEvents Events_SHM 1
/return

Sub Events_SHM
	/doevents DOSHRINK
/return 

Sub Main(string _tank1Name, string _tank2Name, string _tank3Name, int _healPoint, string _assistArgs)
	
	
	/echo You are now in xiris_bot_${Me.Class.ShortName}.mac

	|-- initialize the common xbot libraries
	/call xbot_initialize ${_tank1Name} ${_tank2Name} ${_tank3Name} ${_healPoint} ${_assistArgs}

	|-- initialize the macro specific libraries
	/call variant_initialize

	|-- report my status
	/dgt [${Me.Class.ShortName}] ${Me.Name} ${str_action} >> ${Spawn[${_tank1Name}].CleanName} <<  @ ${int_point_tank_normal} ${_assistArgs}

	|-- target the MT
	/call TrueTarget ${int_MTID}

	|**
	| ----------------------------
	| Main Loop
	| ----------------------------
	| Runs in order listed,
	| if adding any routine add the call here
	| ----------------------------
	|**|
	
	:MainLoop
		/if (${Me.Hovering} || ${Window[tradewnd].Open} || ${Window[lootwnd].Open}) /goto :MainLoop
		|-- Check all Events
		/call RunAllEvents

		|-- Check to make sure MT is still alive, if not, find another
		/call chkMTAlive FALSE
		
		|-- Check to see if self needs to be cured (xiris_curing.inc)
		/call chkNeedCure

		|-- Check the three main groupings of heal classes (xiris_healing.inc)
		/call chkHeal_MT
		/call chkHeal_Self
		/call chkHeal_Group
	
		|-- Check Auto Assist if its on
		/if (${bln_autoAssist}) /call chkAutoAssist

		|-- Check ATTK Buffs with long recast
		/call chkATTKBuffs
		
		|-- Start the Engagment subs
		/if (${bln_engaged}) {
			|-- check all events
			/call RunAllEvents

			|-- debuff lib
			/if (${${DEBUFF_Total}}) /call chkDebuffsOnSingleTarget ${int_targetID}
			
			|-- class specific
			/if (${Pet.ID}) /call chkPetAttack
			/if (${int_cmbtBuffTotal})	/call cmbtBuffGRP
			
			|-- dps library (priest)
			/call chkDOT
			/call chkNuke
			
			|-- std library (burns/aa/clicks)
			/call chkAA
			/call chkBurn
			/call chkClicky

			|-- verify target status
			/call chkTargetStatus

		} else {
			|-- check utilities, includes: sit,loot,leash (out of combat only) and only once every 10 seconds
			/if (!${timer_check_utilities}) /call chkUtils
			/if (!${timer_check_downshits}) /call chkDownshits
			/if (!${timer_check_loot} && ${bln_looting}) /call chkLoot
		}
	|-- start again	
    /goto :MainLoop
/return	




|**
 ----------------------------
 Cannibalization
 ----------------------------
 Applies Cannibalization if mana is below threshold
 ----------------------------
**|

Sub chkManaConvert
	/if (${Me.PctMana} < ${int_canniManaThreshold} && ${Me.SpellReady[${str_canniSpell}]} && ${Me.PctHPs} > ${int_canniHPThreshold}) {
		/echo "${str_canniSpell}"
		/call MQ2Cast "${str_canniSpell}" gem1 5s
	}
	
	/if (${Me.PctMana} < ${int_canniManaThreshold} && ${Me.AltAbilityReady[Cannibalization]} && ${Me.PctHPs} > ${int_canniHPThreshold}) {
		/echo AA "Cannibalization"
		/call MQ2Cast "Cannibalization" alt
	}
/return 


|**
 ----------------------------
 Utility Checking
 ----------------------------
 Checks the utilities such as fail states (GM, Lobby, etc)
 Checks to see if we should med, loot, leash
 note: these routines are defined in xiris_common for the most part
 ----------------------------
**|
Sub chkUtils
	|-- Shaman Specific
	/call chkManaConvert
	/call chkPet
	
	|-- Standard Methods
	/call chkSit
	/varset timer_check_utilities 20s
/return

Sub EVENT_DOSHRINK(_line, _chatSender, _eventParams)
	/echo \ay doShrinkEventCalled
	/if (${FindItemCount[Umbracite Swarm Orb]}) {
		/echo \agShrinking
		/call MQ2Cast "Umbracite Swarm Orb" item
	} else {
		/declare i int local 0
		/for i 0 to 5
			/call TrueTarget ${Group.Member[${i}].ID}
			/delay 5
			/call MQ2Cast "Shrink" gem9 5s
			/delay 10
		/next i
	}
/return


|**
 ----------------------------
 INITIALIZATION Subs
 ----------------------------
 Initialization of values for this specific macro variant
 ----------------------------
**|

Sub variant_initialize
	
	|-- set up default vars
	/declare    str_action				string	outer	Shamanizing	
	/memspellset ${str_spellset}

	|-- Cannibalization
	/declare	int_canniManaThreshold	int		outer 	${Ini[INI_CHAR,CANNIBALIZE,int_canni_mana_threshold,80]}
	/declare	int_canniHPThreshold	int		outer 	${Ini[INI_CHAR,CANNIBALIZE,int_canni_hp_threshold,40]}
	/declare	str_canniSpell			string	outer 	${Ini[INI_CHAR,CANNIBALIZE,str_canni_spell,Ancient:Chaotic Pain]}
	
	/echo \at${Me.Class.Name} Loaded: MT: ${str_MTName}(${int_MTID}) HealPoint:${healPoint} ST: ${str_STName}(${int_STID})
	/call InitEvents_Class
/return

