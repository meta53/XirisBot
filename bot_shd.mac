|**
----------------------------
BOT_SHD.mac
----------------------------
This macro is configured for use by the SHADOWKNIGHT class
Modify the BOT_CLS_CHARNAME.ini file for use by a specific toon
This was written ground up for usage with xiris's bots.


Usage: /mac bot_shd ${_tank1Name} ${_tank2Name} ${_healPoint} ${_assistArgs}

______________________________________________
REVISION HISTORY
    10.02.18	xiris	INITIAL REVISION
	04.16.22	xiris	Small code refactor
	05.08.22	xiris   Added Debuffing
______________________________________________
REQUIRED PLUGINS
    mq2melee
    mq2cast
    mq2eqbc
    mq2debuffs
    mq2moveutils
    
______________________________________________
REQUIRED INCLUDES  
	xiris_common/xiris_common.inc
**|


#include xiris_common/xiris_common.inc

#TURBO 120

Sub InitEvents_Class
	|/call RegisterClassEvents Events_SHD 0
/return

Sub Events_SHD
/return 

Sub Main(string _tank1Name, string _tank2Name, string _tank3Name, int _healPoint, string _assistArgs)
	
	
	/echo You are now in xiris_bot_${Me.Class.ShortName}.mac

	|-- initialize the common xbot libraries
	/call xbot_initialize ${_tank1Name} ${_tank2Name} ${_tank3Name} ${_healPoint} ${_assistArgs}

	|-- initialize the macro specific libraries
	/call variant_initialize

	|-- report my status
	/dgt [${Me.Class.ShortName}] ${Me.Name} ${str_action} >> ${Spawn[${_tank1Name}].CleanName} <<

	|-- target the MT
	/call TrueTarget ${int_MTID}
	
	|**
	----------------------------
	Main Loop
	----------------------------
	Runs in order listed,
	if adding any routine add the call here
	----------------------------
	**|
	
	:MainLoop
		/if (${Me.Hovering} || ${Window[tradewnd].Open} || ${Window[lootwnd].Open}) /goto :MainLoop	
		|-- Check all Events
		/call RunAllEvents

		|-- Check to make sure MT is still alive, if not, find another
		/call chkMTAlive FALSE

		|-- Check Offtanking Situation (xiris_offtanking.inc)
		/if (${bln_offTank}) /call chkOffTanking
		
		|-- Check to see if self needs to be cured (xiris_curing.inc)
		/call chkNeedCure
		
		|-- Check Auto Assist if its on
		/if (${bln_autoAssist}) /call chkAutoAssist

		/if (${bln_engaged}) {
			|-- check all events
			/call RunAllEvents

			|-- class specific
			/if (${Pet.ID}) 		/call chkPetAttack	
			/if (${bln_lifetapUse} && (${Me.PctHPs} <= ${int_lifetapHP}))	/call chkLifetap
			/if (!${bln_tanking}) 	/call chkFeignDeath

			/call RunRapidEvents

			|-- dps library (casting hybrid)
			/if (!${bln_tanking}) {
				/call chkDOT
				/call chkNuke
			}
			

			|-- melee library
			/call chkCA_${Me.Class.ShortName}
			
			|-- std library (burns/aa/clicks)
			/call chkAA
			/call chkBurn
			|/call chkCryActive
			/call chkClicky

			|-- verify target status
			/call chkTargetStatus

		} else {
			|-- check utilities, includes: sit,loot,leash (out of combat only) and only once every 10 seconds
			/if (!${timer_check_utilities}) /call chkUtils
			/if (!${timer_check_downshits}) /call chkDownshits
			/if (!${timer_check_loot} && ${bln_looting}) /call chkLoot
		}
	|-- start again	
    /goto :MainLoop
/return


|**
 ----------------------------
 Lifetap  
 ----------------------------
 Checks current health, and if necessary, lifetaps the target
 ----------------------------
**|

Sub chkLifetap
	/if (${cache_targetID}==${int_targetID}) /call MQ2Cast "${str_lifetapSpell}" ${str_lifetapGem} 2s
/return


|**
 ----------------------------
 FeignDeath  
 ----------------------------
 If FD counter is hit, FDs to kill aggro
 ----------------------------
**|
Sub chkFeignDeath
	/if (${Me.Invis}||${Me.Moving}||!${bln_feignUse}) /return 
	/if (${bln_feignUse} && ${Me.Standing} && (${int_concCount}>=${int_feignCountActive}||${Me.PctHPs}<${int_feignHP})) {
		/call MQ2Cast "${str_feignSpell}" ${str_feignGem}
		/varset timer_feignDelay ${timer_feignDelay.OriginalValue}
		/varset int_concCount 0
		/varset bln_feignAggro TRUE
	}
	/if (${Me.PctHPs}>${int_feignStandHP} && ${Me.Feigning} && !${timer_feignDelay} && ${bln_feignAggro}) {
		/stand
		/varset bln_feignAggro FALSE
	}
/return


|**
 ----------------------------
 Utility Checking
 ----------------------------
 Checks the utilities such as fail states (GM, Lobby, etc)
 Checks to see if we should med, loot, leash
 ----------------------------
**|
Sub chkUtils
	|-- Class Methods
	/if (!${bln_tanking}) /call chkPet
	
	|-- Standard Methods
	/if (!${bln_tanking}) /call chkSit
	/varset timer_check_utilities 20s
	
/return



|**
 ----------------------------
 INITIALIZATION Sub
 ----------------------------
 Initialization of values for this specific macro variant
 ----------------------------
**| 
Sub variant_initialize	
	|-- set up default vars
	/declare    str_action				string	outer	Assisting	
	
	
	|--ShadowKnight Specific Settings
	|--Lifetap
	/declare bln_lifetapUse				bool	outer	${Ini[INI_CHAR,Lifetap,bln_lifetapUse,TRUE]}
	/declare str_lifetapSpell			string	outer	${Ini[INI_CHAR,Lifetap,str_lifetapSpell,Divert Essence Rk. II]}
	/declare str_lifetapGem				string	outer	${Ini[INI_CHAR,Lifetap,str_lifetapGem,gem12]}
	/declare int_lifetapHP				string	outer	${Ini[INI_CHAR,Lifetap,int_lifetapHP,70]}
	
	|--Feign Death
	/declare bln_feignUse				bool	outer 	${Ini[INI_CHAR,FeignDeath,bln_feignUse,TRUE]}
	/declare bln_feignAggro				bool	outer 	${Ini[INI_CHAR,FeignDeath,bln_feignAggro,TRUE]}
	/declare int_feignCountActive		int		outer	${Ini[INI_CHAR,FeignDeath,int_feignCountActive,5]}
	/declare int_feignHP				int		outer   ${Ini[INI_CHAR,FeignDeath,int_feignHP,25]}
	/declare int_feignStandHP			int		outer   ${Ini[INI_CHAR,FeignDeath,int_feignStandHP,65]}
	/declare str_feignSpell				string	outer   ${Ini[INI_CHAR,FeignDeath,str_feignSpell,Improved Death Peace]}
	/declare str_feignGem				string	outer   ${Ini[INI_CHAR,FeignDeath,str_feignGem,alt]}
	/declare timer_feignDelay			timer	outer   ${Ini[INI_CHAR,FeignDeath,timer_feignDelay,3s]}
	
	|--Snaring
	/declare bln_snareUse				bool	outer	${Ini[INI_CHAR,Snare,bln_snareUse,FALSE]}
	/declare int_snareHP				int		outer	${Ini[INI_CHAR,Snare,int_snareHP,35]}
	/if (!${Defined[str_snareSpell]}) /declare str_snareSpell string	outer	${Ini[INI_CHAR,Snare,str_snareSpell,Embracing Darkness]}
	/varset str_snareSpell	${Ini[INI_CHAR,Snare,str_snareSpell,Embracing Darkness]}
	/declare str_snareGem				string	outer   ${Ini[INI_CHAR,Snare,str_snareSpell,alt]}
	/declare int_snareLocalNPC			int		outer	${Ini[INI_CHAR,Snare,int_snareLocalNPC,99]}
	/declare bln_snareActive			bool	outer	FALSE
	/declare int_snareCounter			int		outer	0
	
	
	/memspellset ${str_spellset}
	/echo \at${Me.Class.Name} Loaded: MT: ${str_MTName}(${int_MTID}) HealPoint:${healPoint} ST: ${str_STName}(${int_STID})
	/call InitEvents_Class

	/if (${str_MTName.Equal[${Me.Name}]}) {	
		/echo \agI am tanking, turning aggro on
		/varset bln_tanking TRUE
		/varset bln_taunting TRUE
		/varset stickCmd front
	} else {
		/varset bln_tanking		FALSE
		/varset bln_taunting	FALSE
	}
/return



