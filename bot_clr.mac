|**
----------------------------
BOT_CLR.mac
----------------------------
This macro is configured for use by the CLERIC class
Modify the BOT_CLR_CHARNAME.ini file for use by a specific toon
This was written ground up for usage with xiris's bots
    
Usage: /mac bot_clr ${_tank1Name} ${_tank2Name} ${_healPoint} ${_assistArgs}
______________________________________________
REVISION HISTORY
    08.10.10    xiris	INITIAL REVISION
    10.02.10	xiris	Fixed Group Healing issues
    10.09.10	xiris	Added rez routines
    10.12.10	xiris	Refactored the includes
    10.21.10	xiris	Renamed some of the methods
	11.01.10	xiris	Reverted to using spell_routines.inc
						Modified the cast calls to use this.    
	11.09.10	xiris	Modified healMAINTANK to check to see if the real MT is 
						available again.
	11.15.10	xiris	Modified some of the variable names	
						Removed the redundant chkMana (it is now in chkSit in mbot)
	09.04.15	xiris	Changed the variant_initialize to better handle the output from the loader	
    10.05.15	xiris	Commented out Divine Arbitration check	for emu (no oow yet)
	12.04.15	xiris 	Modified how the initialization of parameters works
	03.27.15	xiris	Added handlers for chchain (see xiris_healing.inc)
	09.10.17	xiris 	Cleaned up extraneous buffing stuff (see xiris_buffing.inc)
	09.17.18    xiris   Included ALL xiris bot libraries in common instead of in individual macros
	12.22.21	xiris	Added ability to be a battle cleric (chkNuke)
						Cleaned up some of the MT checking if inside own group
	04.16.22	xiris	Overhauled group heal method and variable names
						Moved commons healing functions to the include		
	04.19.22	xiris	Integrated the CH2 macro functionality so we don't have to switch macros
	05.13.22	xiris	Updated Events to only listen to BC			
	08.05.22	xiris	Added support for Divine Intervention begging	
______________________________________________
REQUIRED PLUGINS
    mq2cast
    mq2eqbc
    mq2debuffs
    mq2moveutils

______________________________________________
REQUIRED INCLUDES 
	xiris_common/xiris_common.inc
**|


#include xiris_common/xiris_common.inc

#TURBO 120

#EVENT BattleCleric					"#*#BattleOn#*#"
#EVENT CelestialRegeneration		"#*#celregen#*#"
#EVENT AutoRezON					"#*#AutoRezON#*#"
#EVENT AutoRezOFF					"#*#AutoRezOFF#*#"
#EVENT CombatRezON					"#*#CombatRezON#*#"
#EVENT CombatRezOFF					"#*#CombatRezOFF#*#"

|-- Divine Intervention Events
#EVENT DivineInterventionRequest	"#1# tells you#*#'dime#*#'"
#EVENT DivineInterventionRequest	"#1# tells the group#*#'dime#*#'"
#EVENT DivineInterventionRequest	"#1# tells the raid#*#'dime#*#'"
#EVENT DivineInterventionRequest	"[ #1# #*#]#*#dime#*#"

Sub InitEvents_Class 
	/call RegisterClassEvents Events_CLR 8
/return

Sub Events_CLR
	/doevents BattleCleric
	/doevents CelestialRegeneration
	/doevents AutoRezON
	/doevents AutoRezOFF
	/doevents CombatRezON
	/doevents CombatRezOFF
	/doevents DivineInterventionRequest
/return 

Sub Main(string _tank1Name, string _tank2Name, string _tank3Name, int _healPoint, string _assistArgs)
	
	/echo You are now in xiris_bot_${Me.Class.ShortName}.mac

	|-- initialize the common xbot libraries
	/call xbot_initialize ${_tank1Name} ${_tank2Name} ${_tank3Name} ${_healPoint} ${_assistArgs}

	|-- initialize the macro specific libraries
	/call variant_initialize

	|-- report my status
	/dgt [${Me.Class.ShortName}] ${Me.Name} ${str_action} >> ${Spawn[${_tank1Name}].CleanName} <<  @ ${int_point_tank_normal} ${_assistArgs}

	|-- target the MT
	/call TrueTarget ${int_MTID}

	|**
	----------------------------
	Main Loop
	----------------------------
	Runs in order listed,
	if adding any routine add the call here
	----------------------------
	**|
	
	:MainLoop
		/if (${Me.Hovering} || ${Window[tradewnd].Open} || ${Window[lootwnd].Open}) /goto :MainLoop	
		|-- Check all Events
		/call RunAllEvents

		|-- Check to make sure MT is still alive, if not, find another and target it
		|/echo chkMTAlive
		/call chkMTAlive TRUE

		|-- Check to see if self needs to be cured (xiris_curing.inc)
		/call chkNeedCure
		
		|-- Check the three main groupings of heal classes (xiris_healing.inc)
		/call chkHeal_MT
		/call chkHeal_Self
		/call chkHeal_Group
		
		|-- Check to see if we are autorezzing
		/if ((${bln_autoRez} && !${bln_engaged}) || (${bln_combatRez} && ${bln_engaged})) /call chkResurrection

		|-- Check Divine Arbitration Flag
		/if (!${bln_divineArbReady}) /call chkArbitrationReady

		|-- Check Auto Assist if its on
		/if (${bln_autoAssist} && ${bln_battleCleric}) /call chkAutoAssist
		
		|-- If Engaged run Raid Events
		/if (${bln_engaged}) {
			|-- check all events
			/call RunAllEvents

			|-- verify engagement status (Acts like chkTargetStatus, but for non meleeing)
			/call chkMobDead

			|-- debuff lib
			/if (${${DEBUFF_Total}}) /call chkDebuffsOnSingleTarget ${int_targetID}

			|-- class specific
			/if (${bln_cmbtBuffUse} && ${int_cmbtBuffTotal}) /call cmbtBuffMT

			/if (${bln_battleCleric}) {
				|-- dps library (priest)
				/call chkNuke
				
				|-- std library (burns/aa/clicks)
				/call chkAA
				/call chkBurn
				/call chkClicky

				|-- verify target status
				/call chkTargetStatus
			}
		} else {
			|-- check utilities, includes: sit,loot,leash (out of combat only) and only once every 10 seconds
			/if (!${timer_check_utilities}) /call chkUtils
			/if (!${timer_check_downshits}) /call chkDownshits
			/if (!${timer_check_loot} && ${bln_looting}) /call chkLoot
		}
	|-- start again	
    /goto :MainLoop
/return





Sub EVENT_CelestialRegeneration
	/call MGBCelestialRegeneration
/return

Sub chkMGBCelestialRotation
	| loop through the MGB Celestial Rotation members
	| if they have all fired before (me) and ! Celestial Regeneration, then fire mine.

/return


Sub MGBCelestialRegeneration
	/if (${Me.AltAbilityReady[Mass Group Buff]} && ${Me.AltAbilityReady[Celestial Regeneration]}) {
		/call MQ2Cast "Mass Group Buff" alt
		/delay 10
		/call MQ2Cast "Celestial Regeneration" alt
		/return
	}

	/if (${Me.AltAbilityReady[Celestial Regeneration]}) {
		/call MQ2Cast "Celestial Regeneration" alt
	}

/return

Sub EVENT_DivineInterventionRequest(_line, _sender, _eventParams) 
	/if (${Bool[${Me.Spell[Divine Intervention].ID}]}) {
		/if (${Me.SpellReady[Divine Intervention]}) {
			/declare tid int local ${Spawn[pc ${_sender}].ID}
			/if (${Target.ID} != ${tid}) {
				/call TrueTarget ${tid}
			}
			/echo \agDivine Intervention\aw on \ay${Target.Name}(${tid})
			/call MQ2Cast "Divine Intervention" gem6 8s
			/docommand /${announceChannel} DI >> ${Target.Name}
		} else {
			/docommand /${announceChannel} DI is NOT ready, ask someone else!
		}
	}
	/doevents flush DivineInterventionRequest
/return


Sub Event_AutoRezOn
	/call AutoRezON
	/doevents flush AutoRezON
/return

Sub AutoRezON
	/dgt ${Me.Name} is now auto rezzing out of combat.
	/varset bln_autoRez TRUE
/return 

Sub Event_AutoRezOff
	/call AutoRezOFF
	/doevents flush AutoRezOFF
/return 

Sub AutoRezOFF
	/dgt ${Me.Name} is no auto rezzing out of combat.
	/varset bln_autoRez FALSE
/return


Sub Event_CombatRezON
	/call CombatRezON
	/doevents flush CombatRezON
/return

Sub CombatRezON 
	/dgt ${Me.Name} is now auto rezzing during combat.
	/varset bln_autoRez TRUE
	/varset bln_combatRez TRUE
/return 

Sub Event_CombatRezOFF
	/call CombatRezOFF
	/doevents flush CombatRezOFF
/return 

Sub CombatRezOFF
	/dgt ${Me.Name} is no longer auto rezzing during combat.
	/varset bln_autoRez FALSE
	/varset bln_combatRez FALSE
/return


|**
----------------------------
Check|Set to see if Divine Arbitration is Ready
----------------------------  
**|
Sub chkArbitrationReady
	/varset bln_divineArbReady	FALSE
	/if (${Me.AltAbilityReady[divine arbitration]} || !${FindItem[${str_epicName}].Timer}) /varset bln_divineArbReady TRUE
/return


|**
----------------------------
Check|Set to see if Divine Intervention is Ready
----------------------------  
**|
Sub chkDivineIntervention
	/if (${FindItemCount[Emerald]} && ${Me.SpellReady[Divine Intervention]} && !${NetBots[${Target.Name}].Buff[Divine Intervention].Name.Equal[Divine Intervention]}) {
		/say Casting Divine Intervention on ${Target.Name}!
		/call MQ2Cast "Divine Intervention"
	}
/return


|**
 ----------------------------
 UTILITY Subs
 ----------------------------
 Things to do while OOC (or if in RAID)
 ----------------------------
**|   
Sub chkUtils
	|-- Standard Methods
	/call chkSit
	/varset timer_check_utilities 20s
/return

Sub chkYaulp
	|/echo chkYaulp (${bln_engaged} && ${Me.PctMana}<=${int_medPercent} && ${Me.SpellReady[${str_spellYaulp}]})
	/if (!${bln_useYaulp}) /return
	/if (${bln_engaged} && ${Me.PctMana}<=${int_medPercent} && ${Me.SpellReady[${str_spellYaulp}]}) {
		/call MQ2Cast "${str_spellYaulp}" ${str_gemYaulp}
	}
/return

|-------------------------------------------------------------------------------- 
|SUB: setMTFromEvent
|--------------------------------------------------------------------------------
Sub setMTFromEvent(string cmd, string param)
	/dgt setMTFromEvent:: ${cmd} ${param}
	/call setMT ${param}
/return

Sub EVENT_BattleCleric(string _line, string _sender, string _eventParams)
	|--Toggle Battle Cleric mode!
	/if (${_eventParams.Equal[ON]}) {
		/dgt ${Me.Name} is now a battle cleric!
		/varset bln_battleCleric TRUE
	}
	/if (${_eventParamsEqual[OFF]}) {
		/dgt ${Me.Name} is no longer a battle cleric.
		/varset bln_battleCleric FALSE
	}
/return		

|**
 ----------------------------
 INITIALIZATION Subs
 ----------------------------
 Initialization of values for this specific macro variant
 ----------------------------
**| 

Sub variant_initialize
	
	|-- set up default vars
	/declare	int_CTGTID				int 	outer	0
	/declare	int_currentFPoint		int		outer	30

	/declare    str_action				string	outer	Healing
	/declare	str_currHeal			string	outer	NULL

	|-- Yaulp Settings
	/declare	bln_useYaulp			bool	outer	${Ini[INI_CHAR,Yaulp,bln_useYaulp,FALSE]}
	/declare	str_spellYaulp			string	outer 	${Ini[INI_CHAR,Yaulp,str_spellYaulp,Yaulp VII]}
	/declare 	str_gemYaulp			string	outer 	${Ini[INI_CHAR,Yaulp,str_spellYaulp,gem9]}
	
	|-- Heal Settings
	/declare	bln_annouce     		bool    outer   ${Ini[INI_CHAR,Cleric_Settings,bln_annouce,FALSE]}
	/declare	str_buffGem     		string  outer   ${Ini[INI_CHAR,Cleric_Settings,str_buffGem,gem9]}
	
	|-- Items 
	/declare	str_epicName			string	outer	${Ini[INI_CHAR,Items,str_epicName,Aegis of Superior Divinity]}
	/declare    bln_hasEpic				bool    outer   ${Ini[INI_CHAR,Items,bln_hasEpic,FALSE]}
	/declare    bln_divineArb			bool    outer   ${Ini[INI_CHAR,Items,bln_divineArb,TRUE]}
	/declare 	bln_healAfterArb		bool	outer	${Ini[INI_CHAR,Items,bln_healAfterArb,TRUE]}

	|-- Celestial MGB Rotation
	/declare	arr_celestial[17]		string  outer

	/memspellset default
	/echo \at${Me.Class.Name} Loaded: MT: ${str_MTName}(${int_MTID})  HealPoint:${healPoint} ST: ${str_STName}(${int_STID})
	/call InitEvents_Class
/return
