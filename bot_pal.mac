|**
----------------------------
BOT_PAL.mac
----------------------------
This macro is configured for use by the PALADIN class
Modify the BOT_CLS_CHARNAME.ini file for use by a specific toon
This was written ground up for usage with xiris's bots.


Usage: /mac bot_pal ${_tank1Name} ${_tank2Name} ${_healPoint} ${_assistArgs}

______________________________________________
REVISION HISTORY
    10.09.16	xiris	INITIAL REVISION
	10.27.16	xiris	ADDED curing/healing/buffing subs
	11.11.17	xiris   Added support for removal of mq2melee
	09.17.18    xiris   Included ALL xiris bot libraries in common instead of in individual macros
	04.05.22 	xiris	Added new Events aggregator and handlers
	04.16.22	xiris	Overhauled group heal method and variable names
						Moved commons healing functions to the include
						Added methods for stunning and stun-locking
______________________________________________
REQUIRED PLUGINS
    mq2cast
    mq2eqbc
    mq2debuffs
    mq2moveutils
    
______________________________________________
REQUIRED INCLUDES  
	xiris_common/xiris_common.inc
**|


#include xiris_common/xiris_common.inc

#TURBO 120

#EVENT STUNMOB "<#1#> stunThis #2#"
#EVENT STUNMOB "[#1#(msg)] stunThis #2#"
#EVENT STUNMOB "#1# tells you,#*#'stunThis #2#'"
#EVENT STUNMOB "#1# tells the group#*#'stunThis #2#'"
#EVENT STUNMOB "#1#tells the raid,#*#'stunThis #2#'"

#EVENT STUNLOCK "<#1#> stunLock #2#"
#EVENT STUNLOCK "[#1#(msg)] stunLock #2#"
#EVENT STUNLOCK "#1# tells you,#*#'stunLock #2#'"
#EVENT STUNLOCK "#1# tells the group#*#'stunLock #2#'"
#EVENT STUNLOCK "#1#tells the raid,#*#'stunLock #2#'"

#EVENT STUNSTOP "<#1#> stunStop#*#"
#EVENT STUNSTOP "[#1#(msg)] stunStop#*#"
#EVENT STUNSTOP "#1# tells you,#*#'stunStop#*#'"
#EVENT STUNSTOP "#1# tells the group#*#'stunStop#*#'"
#EVENT STUNSTOP "#1#tells the raid,#*#'stunStop#*#'"


Sub InitEvents_Class
	/call RegisterClassEvents Events_PAL 3
/return

Sub Events_PAL
	/doevents STUNMOB
	/doevents STUNLOCK
	/doevents STUNSTOP
/return 

Sub Main(string _tank1Name, string _tank2Name, string _tank3Name, int _healPoint, string _assistArgs)
	/echo You are now in xiris_bot_${Me.Class.ShortName}.mac

	|-- initialize the common xbot libraries
	/call xbot_initialize ${_tank1Name} ${_tank2Name} ${_tank3Name} ${_healPoint} ${_assistArgs}

	|-- initialize the macro specific libraries
	/call variant_initialize

	|-- report my status
	/dgt [${Me.Class.ShortName}] ${Me.Name} ${str_action} >> ${Spawn[${_tank1Name}].CleanName} <<

	|-- target the MT
	/call TrueTarget ${int_MTID}

	|**
	----------------------------
	Main Loop
	----------------------------
	Runs in order listed,
	if adding any routine add the call here
	----------------------------
	**|
	
	:MainLoop
		/if (${Me.Hovering} || ${Window[tradewnd].Open} || ${Window[lootwnd].Open}) /goto :MainLoop	
		|-- Check all Events
		/call RunAllEvents

		|-- Check to make sure MT is still alive, if not, find another
		/call chkMTAlive FALSE
		
		|-- Check Offtanking Situation (xiris_offtanking.inc)
		/if (${bln_offTank}) /call chkOffTanking
		
		|-- Check to see if self needs to be cured (xiris_curing.inc)
		/call chkNeedCure
	
		|-- Check the two main groupings of heal classes (xiris_healing.inc)
		/call chkHeal_Self
		/call chkHeal_Group

		|-- Check Auto Assist if its on
		/if (${bln_autoAssist}) /call chkAutoAssist
		
		/if (${bln_engaged}) {
			|-- check all events
			/call RunAllEvents

			|-- dps library (caster)
			/if (${bln_tanking}) /call chkStun FALSE

			|-- melee library
		    /call chkCA_${Me.Class.ShortName}
			
			|-- std library (burns/aa/clicks)
			/call chkAA
			/call chkBurn
			|/call chkCryActive
			/call chkClicky

			|-- verify target status
			/call chkTargetStatus

		} else {
			|-- check utilities, includes: sit,loot,leash (out of combat only) and only once every 10 seconds
			/if (!${timer_check_utilities}) /call chkUtils
			/if (!${timer_check_downshits}) /call chkDownshits
			/if (!${timer_check_loot} && ${bln_looting}) /call chkLoot
		}
	|-- start again	
    /goto :MainLoop
/return	


|**
 ----------------------------
 Utility Checking
 ----------------------------
 Checks the utilities such as fail states (GM, Lobby, etc)
 Checks to see if we should med, loot, leash
 ----------------------------
**|
Sub chkUtils
	|-- Standard Methods
	/if (!${bln_tanking}) /call chkSit
	/varset timer_check_utilities 20s
/return

Sub EVENT_STUNMOB(_line, _chatSender, _eventParams)
	/echo \ayI should stun this mob
	/call TrueTarget(${_eventParams.Arg[1, ]})
	/call chkStun TRUE
	/doevents flush STUNMOB
/return

Sub EVENT_STUNLOCK(_line, _chatSender, _eventParams)
	/echo \aoI am Stun Locking this mob
	/call TrueTarget(${_eventParams.Arg[1, ]})
	/call chkStunLock
	/doevents flush STUNLOCK
/return

Sub EVENT_STUNSTOP(_line, _chatSender, _eventParams)
	/echo \agI am no lnger Stun Locking the mob
	/call chkStunLockStop
	/doevents flush STUNLOCKSTOP
/return


|**
 ----------------------------
 INITIALIZATION Sub
 ----------------------------
 Initialization of values for this specific macro variant
 ----------------------------
**| 
Sub variant_initialize	
	|-- set up default vars
	/declare    str_action				string	outer	Assisting	
	/memspellset ${str_spellset}

	/echo \at${Me.Class.Name} Loaded: MT: ${str_MTName}(${int_MTID}) HealPoint:${healPoint} ST: ${str_STName}(${int_STID})
	/call InitEvents_Class

	/if (${str_MTName.Equal[${Me.Name}]}) {	
		/echo \agI am tanking, turning aggro on
		/varset bln_tanking		TRUE
		/varset bln_taunting	TRUE
		/varset stickCmd front
	} else {
		/varset bln_tanking		FALSE
		/varset bln_taunting	FALSE
	}
/return


